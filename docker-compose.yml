services:  # MySQL Database
  database:
    image: mysql:8.0
    container_name: lib-management-db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: Htkhoi71103
      MYSQL_DATABASE: librarydb
      MYSQL_USER: libuser
      MYSQL_PASSWORD: libpassword
    ports:
      - "3307:3306"  # Using 3307 to avoid conflicts with local MySQL
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - lib-management-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s
  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: lib-management-backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/librarydb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: libuser
      SPRING_DATASOURCE_PASSWORD: libpassword
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - lib-management-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 5s
      retries: 5
      interval: 30s
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lib-management-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lib-management-network
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      timeout: 5s
      retries: 3
      interval: 30s
      start_period: 10s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: lib-management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lib-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s

  # Nginx Load Balancer (optional - for multiple backend instances)
  nginx:
    image: nginx:alpine
    container_name: lib-management-nginx
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - lib-management-network
    profiles:
      - load-balancer

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  lib-management-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
